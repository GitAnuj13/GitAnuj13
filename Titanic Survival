{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b45f58a1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:38.855045Z",
     "iopub.status.busy": "2024-09-29T10:25:38.854554Z",
     "iopub.status.idle": "2024-09-29T10:25:42.007786Z",
     "shell.execute_reply": "2024-09-29T10:25:42.006510Z"
    },
    "papermill": {
     "duration": 3.169986,
     "end_time": "2024-09-29T10:25:42.011278",
     "exception": false,
     "start_time": "2024-09-29T10:25:38.841292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n",
    "from sklearn.metrics import roc_auc_score, roc_curve\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a153f856",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.041159Z",
     "iopub.status.busy": "2024-09-29T10:25:42.039954Z",
     "iopub.status.idle": "2024-09-29T10:25:42.064876Z",
     "shell.execute_reply": "2024-09-29T10:25:42.063812Z"
    },
    "papermill": {
     "duration": 0.040354,
     "end_time": "2024-09-29T10:25:42.067689",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.027335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"/kaggle/input/titanic/train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a201d01f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.091544Z",
     "iopub.status.busy": "2024-09-29T10:25:42.091112Z",
     "iopub.status.idle": "2024-09-29T10:25:42.127530Z",
     "shell.execute_reply": "2024-09-29T10:25:42.125945Z"
    },
    "papermill": {
     "duration": 0.051392,
     "end_time": "2024-09-29T10:25:42.130244",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.078852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>female</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>female</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>male</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>male</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name     Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                             Allen, Mr. William Henry    male  35.0      0   \n",
       "..                                                 ...     ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    male  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith  female  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"  female   NaN      1   \n",
       "889                              Behr, Mr. Karl Howell    male  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    male  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin Embarked  \n",
       "0        0         A/5 21171   7.2500   NaN        S  \n",
       "1        0          PC 17599  71.2833   C85        C  \n",
       "2        0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3        0            113803  53.1000  C123        S  \n",
       "4        0            373450   8.0500   NaN        S  \n",
       "..     ...               ...      ...   ...      ...  \n",
       "886      0            211536  13.0000   NaN        S  \n",
       "887      0            112053  30.0000   B42        S  \n",
       "888      2        W./C. 6607  23.4500   NaN        S  \n",
       "889      0            111369  30.0000  C148        C  \n",
       "890      0            370376   7.7500   NaN        Q  \n",
       "\n",
       "[891 rows x 12 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6e12b014",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.155371Z",
     "iopub.status.busy": "2024-09-29T10:25:42.154928Z",
     "iopub.status.idle": "2024-09-29T10:25:42.177214Z",
     "shell.execute_reply": "2024-09-29T10:25:42.176151Z"
    },
    "papermill": {
     "duration": 0.041179,
     "end_time": "2024-09-29T10:25:42.183077",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.141898",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0c78a0d0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.208960Z",
     "iopub.status.busy": "2024-09-29T10:25:42.208505Z",
     "iopub.status.idle": "2024-09-29T10:25:42.217698Z",
     "shell.execute_reply": "2024-09-29T10:25:42.216679Z"
    },
    "papermill": {
     "duration": 0.025268,
     "end_time": "2024-09-29T10:25:42.220387",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.195119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/286566303.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['Age'].fillna(df['Age'].median(), inplace=True)\n"
     ]
    }
   ],
   "source": [
    "df['Age'].fillna(df['Age'].median(), inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8be00e7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.245543Z",
     "iopub.status.busy": "2024-09-29T10:25:42.245095Z",
     "iopub.status.idle": "2024-09-29T10:25:42.253373Z",
     "shell.execute_reply": "2024-09-29T10:25:42.252205Z"
    },
    "papermill": {
     "duration": 0.02367,
     "end_time": "2024-09-29T10:25:42.255876",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.232206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/3744086084.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n"
     ]
    }
   ],
   "source": [
    "df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6aa542a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.281765Z",
     "iopub.status.busy": "2024-09-29T10:25:42.280838Z",
     "iopub.status.idle": "2024-09-29T10:25:42.294729Z",
     "shell.execute_reply": "2024-09-29T10:25:42.293593Z"
    },
    "papermill": {
     "duration": 0.029867,
     "end_time": "2024-09-29T10:25:42.297462",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.267595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     891 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8db70330",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.323253Z",
     "iopub.status.busy": "2024-09-29T10:25:42.322790Z",
     "iopub.status.idle": "2024-09-29T10:25:42.332370Z",
     "shell.execute_reply": "2024-09-29T10:25:42.331239Z"
    },
    "papermill": {
     "duration": 0.025326,
     "end_time": "2024-09-29T10:25:42.334773",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.309447",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0       NaN\n",
       "1       C85\n",
       "2       NaN\n",
       "3      C123\n",
       "4       NaN\n",
       "       ... \n",
       "886     NaN\n",
       "887     B42\n",
       "888     NaN\n",
       "889    C148\n",
       "890     NaN\n",
       "Name: Cabin, Length: 891, dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Cabin']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28a4362a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.360742Z",
     "iopub.status.busy": "2024-09-29T10:25:42.360224Z",
     "iopub.status.idle": "2024-09-29T10:25:42.368801Z",
     "shell.execute_reply": "2024-09-29T10:25:42.367622Z"
    },
    "papermill": {
     "duration": 0.024609,
     "end_time": "2024-09-29T10:25:42.371387",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.346778",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Has_Cabin'] =df['Cabin'].apply(lambda x: 0 if pd.isnull(x) else 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "059b4bb9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.398221Z",
     "iopub.status.busy": "2024-09-29T10:25:42.397434Z",
     "iopub.status.idle": "2024-09-29T10:25:42.410137Z",
     "shell.execute_reply": "2024-09-29T10:25:42.409033Z"
    },
    "papermill": {
     "duration": 0.029343,
     "end_time": "2024-09-29T10:25:42.412826",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.383483",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 13 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     891 non-null    object \n",
      " 12  Has_Cabin    891 non-null    int64  \n",
      "dtypes: float64(2), int64(6), object(5)\n",
      "memory usage: 90.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9fbf4ab2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.439566Z",
     "iopub.status.busy": "2024-09-29T10:25:42.438784Z",
     "iopub.status.idle": "2024-09-29T10:25:42.448369Z",
     "shell.execute_reply": "2024-09-29T10:25:42.447240Z"
    },
    "papermill": {
     "duration": 0.025777,
     "end_time": "2024-09-29T10:25:42.450934",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.425157",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        male\n",
       "1      female\n",
       "2      female\n",
       "3      female\n",
       "4        male\n",
       "        ...  \n",
       "886      male\n",
       "887    female\n",
       "888    female\n",
       "889      male\n",
       "890      male\n",
       "Name: Sex, Length: 891, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.Sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6c5fc099",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.477732Z",
     "iopub.status.busy": "2024-09-29T10:25:42.477232Z",
     "iopub.status.idle": "2024-09-29T10:25:42.486619Z",
     "shell.execute_reply": "2024-09-29T10:25:42.485458Z"
    },
    "papermill": {
     "duration": 0.02597,
     "end_time": "2024-09-29T10:25:42.489202",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.463232",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df['Sex'] = df['Sex'].map({'male': 0, 'female': 1}).astype('int64')\n",
    "df['Embarked'] = df['Embarked'].map({'C': 1, 'Q': 2, 'S': 3}).astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d57f8312",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.516075Z",
     "iopub.status.busy": "2024-09-29T10:25:42.515122Z",
     "iopub.status.idle": "2024-09-29T10:25:42.529000Z",
     "shell.execute_reply": "2024-09-29T10:25:42.527710Z"
    },
    "papermill": {
     "duration": 0.029948,
     "end_time": "2024-09-29T10:25:42.531604",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.501656",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 13 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    int64  \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     891 non-null    int64  \n",
      " 12  Has_Cabin    891 non-null    int64  \n",
      "dtypes: float64(2), int64(8), object(3)\n",
      "memory usage: 90.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3a2ae464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:42.558845Z",
     "iopub.status.busy": "2024-09-29T10:25:42.557754Z",
     "iopub.status.idle": "2024-09-29T10:25:43.143688Z",
     "shell.execute_reply": "2024-09-29T10:25:43.142460Z"
    },
    "papermill": {
     "duration": 0.603941,
     "end_time": "2024-09-29T10:25:43.148041",
     "exception": false,
     "start_time": "2024-09-29T10:25:42.544100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1 = df.drop(columns=['PassengerId', 'Name', 'Ticket', 'Cabin'])  # Dropping non-numeric columns\n",
    "df2 = df1.dropna()  # Drop rows with missing values\n",
    "\n",
    "# Calculate correlation matrix\n",
    "corr_matrix = df2.corr()\n",
    "\n",
    "# Plot the heatmap\n",
    "plt.figure(figsize=(10,8))\n",
    "sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b6413800",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.179908Z",
     "iopub.status.busy": "2024-09-29T10:25:43.179437Z",
     "iopub.status.idle": "2024-09-29T10:25:43.189645Z",
     "shell.execute_reply": "2024-09-29T10:25:43.188497Z"
    },
    "papermill": {
     "duration": 0.028852,
     "end_time": "2024-09-29T10:25:43.192127",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.163275",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass\n",
       "1    136\n",
       "2     87\n",
       "3    119\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=df.groupby(by=\"Pclass\")[\"Survived\"].sum()\n",
    "a\n",
    "#mostly people are travelling by Pclass3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "313dddf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.223020Z",
     "iopub.status.busy": "2024-09-29T10:25:43.222535Z",
     "iopub.status.idle": "2024-09-29T10:25:43.230540Z",
     "shell.execute_reply": "2024-09-29T10:25:43.229351Z"
    },
    "papermill": {
     "duration": 0.026139,
     "end_time": "2024-09-29T10:25:43.232992",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.206853",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "342"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Survived\"].sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d88abeb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.269786Z",
     "iopub.status.busy": "2024-09-29T10:25:43.268447Z",
     "iopub.status.idle": "2024-09-29T10:25:43.280933Z",
     "shell.execute_reply": "2024-09-29T10:25:43.279708Z"
    },
    "papermill": {
     "duration": 0.03862,
     "end_time": "2024-09-29T10:25:43.287356",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.248736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass\n",
       "1    216\n",
       "2    184\n",
       "3    491\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(by=\"Pclass\")[\"Sex\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1b154496",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.324724Z",
     "iopub.status.busy": "2024-09-29T10:25:43.324212Z",
     "iopub.status.idle": "2024-09-29T10:25:43.344686Z",
     "shell.execute_reply": "2024-09-29T10:25:43.343026Z"
    },
    "papermill": {
     "duration": 0.041401,
     "end_time": "2024-09-29T10:25:43.347402",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.306001",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sex       0    1\n",
      "Pclass          \n",
      "1       122   94\n",
      "2       108   76\n",
      "3       347  144\n"
     ]
    }
   ],
   "source": [
    "pivot_table = df.pivot_table(values=\"Survived\", index=\"Pclass\", columns=\"Sex\", aggfunc=\"count\")\n",
    "\n",
    "print(pivot_table)\n",
    "\n",
    "# because there was less males in Pclass 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "08ce3780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.378705Z",
     "iopub.status.busy": "2024-09-29T10:25:43.378207Z",
     "iopub.status.idle": "2024-09-29T10:25:43.385495Z",
     "shell.execute_reply": "2024-09-29T10:25:43.384250Z"
    },
    "papermill": {
     "duration": 0.026697,
     "end_time": "2024-09-29T10:25:43.388974",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.362277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Survived     0\n",
      "Pclass       0\n",
      "Sex          0\n",
      "Age          0\n",
      "SibSp        0\n",
      "Parch        0\n",
      "Fare         0\n",
      "Embarked     0\n",
      "Has_Cabin    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df2.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "44653c4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.429219Z",
     "iopub.status.busy": "2024-09-29T10:25:43.428241Z",
     "iopub.status.idle": "2024-09-29T10:25:43.472145Z",
     "shell.execute_reply": "2024-09-29T10:25:43.470863Z"
    },
    "papermill": {
     "duration": 0.068114,
     "end_time": "2024-09-29T10:25:43.475066",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.406952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Survived      Pclass         Sex         Age       SibSp       Parch  \\\n",
      "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
      "mean     0.383838    2.308642    0.352413   29.361582    0.523008    0.381594   \n",
      "std      0.486592    0.836071    0.477990   13.019697    1.102743    0.806057   \n",
      "min      0.000000    1.000000    0.000000    0.420000    0.000000    0.000000   \n",
      "25%      0.000000    2.000000    0.000000   22.000000    0.000000    0.000000   \n",
      "50%      0.000000    3.000000    0.000000   28.000000    0.000000    0.000000   \n",
      "75%      1.000000    3.000000    1.000000   35.000000    1.000000    0.000000   \n",
      "max      1.000000    3.000000    1.000000   80.000000    8.000000    6.000000   \n",
      "\n",
      "             Fare    Embarked   Has_Cabin  \n",
      "count  891.000000  891.000000  891.000000  \n",
      "mean    32.204208    2.536476    0.228956  \n",
      "std     49.693429    0.791503    0.420397  \n",
      "min      0.000000    1.000000    0.000000  \n",
      "25%      7.910400    2.000000    0.000000  \n",
      "50%     14.454200    3.000000    0.000000  \n",
      "75%     31.000000    3.000000    0.000000  \n",
      "max    512.329200    3.000000    1.000000  \n"
     ]
    }
   ],
   "source": [
    "print(df2.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "aa0d0f5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.523435Z",
     "iopub.status.busy": "2024-09-29T10:25:43.522457Z",
     "iopub.status.idle": "2024-09-29T10:25:43.541796Z",
     "shell.execute_reply": "2024-09-29T10:25:43.540467Z"
    },
    "papermill": {
     "duration": 0.045349,
     "end_time": "2024-09-29T10:25:43.544483",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.499134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x800 with 0 Axes>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1200x800 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d8c3ffe8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:43.577252Z",
     "iopub.status.busy": "2024-09-29T10:25:43.576407Z",
     "iopub.status.idle": "2024-09-29T10:25:44.016282Z",
     "shell.execute_reply": "2024-09-29T10:25:44.015088Z"
    },
    "papermill": {
     "duration": 0.459155,
     "end_time": "2024-09-29T10:25:44.018919",
     "exception": false,
     "start_time": "2024-09-29T10:25:43.559764",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Age Distribution')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Age distribution\n",
    "plt.subplot(2, 2, 1)\n",
    "sns.histplot(df2['Age'], bins=30, kde=True)\n",
    "plt.title('Age Distribution')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "45c6313e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:44.052114Z",
     "iopub.status.busy": "2024-09-29T10:25:44.051673Z",
     "iopub.status.idle": "2024-09-29T10:25:44.069389Z",
     "shell.execute_reply": "2024-09-29T10:25:44.068463Z"
    },
    "papermill": {
     "duration": 0.037144,
     "end_time": "2024-09-29T10:25:44.072045",
     "exception": false,
     "start_time": "2024-09-29T10:25:44.034901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create FamilySize feature\n",
    "df['FamilySize'] = df['SibSp'] + df['Parch'] + 1\n",
    "\n",
    "# Create IsAlone feature\n",
    "# Create IsAlone feature\n",
    "df['IsAlone'] = 1  # Default as alone\n",
    "df.loc[df['FamilySize'] > 1, 'IsAlone'] = 0  # Not alone if FamilySize > 1\n",
    "\n",
    "\n",
    "# Extract Title from Name\n",
    "df['Title'] = df['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\n",
    "\n",
    "# Map rare titles together\n",
    "df['Title'] = df['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', \n",
    "                                     'Don', 'Dr', 'Major', 'Rev', 'Sir', \n",
    "                                     'Jonkheer', 'Dona'], 'Rare')\n",
    "\n",
    "# Map other titles to specific categories\n",
    "df['Title'] = df['Title'].replace('Mlle', 'Miss')\n",
    "df['Title'] = df['Title'].replace('Ms', 'Miss')\n",
    "df['Title'] = df['Title'].replace('Mme', 'Mrs')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "bed8c65b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:44.105167Z",
     "iopub.status.busy": "2024-09-29T10:25:44.104719Z",
     "iopub.status.idle": "2024-09-29T10:25:44.129469Z",
     "shell.execute_reply": "2024-09-29T10:25:44.128227Z"
    },
    "papermill": {
     "duration": 0.044339,
     "end_time": "2024-09-29T10:25:44.132118",
     "exception": false,
     "start_time": "2024-09-29T10:25:44.087779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>Has_Cabin</th>\n",
       "      <th>FamilySize</th>\n",
       "      <th>IsAlone</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>887</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>Montvila, Rev. Juozas</td>\n",
       "      <td>0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>211536</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Rare</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>888</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Graham, Miss. Margaret Edith</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>112053</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>B42</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>889</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n",
       "      <td>1</td>\n",
       "      <td>28.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>W./C. 6607</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>890</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Behr, Mr. Karl Howell</td>\n",
       "      <td>0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>111369</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>C148</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>891</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Dooley, Mr. Patrick</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>370376</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Survived  Pclass  \\\n",
       "0              1         0       3   \n",
       "1              2         1       1   \n",
       "2              3         1       3   \n",
       "3              4         1       1   \n",
       "4              5         0       3   \n",
       "..           ...       ...     ...   \n",
       "886          887         0       2   \n",
       "887          888         1       1   \n",
       "888          889         0       3   \n",
       "889          890         1       1   \n",
       "890          891         0       3   \n",
       "\n",
       "                                                  Name  Sex   Age  SibSp  \\\n",
       "0                              Braund, Mr. Owen Harris    0  22.0      1   \n",
       "1    Cumings, Mrs. John Bradley (Florence Briggs Th...    1  38.0      1   \n",
       "2                               Heikkinen, Miss. Laina    1  26.0      0   \n",
       "3         Futrelle, Mrs. Jacques Heath (Lily May Peel)    1  35.0      1   \n",
       "4                             Allen, Mr. William Henry    0  35.0      0   \n",
       "..                                                 ...  ...   ...    ...   \n",
       "886                              Montvila, Rev. Juozas    0  27.0      0   \n",
       "887                       Graham, Miss. Margaret Edith    1  19.0      0   \n",
       "888           Johnston, Miss. Catherine Helen \"Carrie\"    1  28.0      1   \n",
       "889                              Behr, Mr. Karl Howell    0  26.0      0   \n",
       "890                                Dooley, Mr. Patrick    0  32.0      0   \n",
       "\n",
       "     Parch            Ticket     Fare Cabin  Embarked  Has_Cabin  FamilySize  \\\n",
       "0        0         A/5 21171   7.2500   NaN         3          0           2   \n",
       "1        0          PC 17599  71.2833   C85         1          1           2   \n",
       "2        0  STON/O2. 3101282   7.9250   NaN         3          0           1   \n",
       "3        0            113803  53.1000  C123         3          1           2   \n",
       "4        0            373450   8.0500   NaN         3          0           1   \n",
       "..     ...               ...      ...   ...       ...        ...         ...   \n",
       "886      0            211536  13.0000   NaN         3          0           1   \n",
       "887      0            112053  30.0000   B42         3          1           1   \n",
       "888      2        W./C. 6607  23.4500   NaN         3          0           4   \n",
       "889      0            111369  30.0000  C148         1          1           1   \n",
       "890      0            370376   7.7500   NaN         2          0           1   \n",
       "\n",
       "     IsAlone Title  \n",
       "0          0    Mr  \n",
       "1          0   Mrs  \n",
       "2          1  Miss  \n",
       "3          0   Mrs  \n",
       "4          1    Mr  \n",
       "..       ...   ...  \n",
       "886        1  Rare  \n",
       "887        1  Miss  \n",
       "888        0  Miss  \n",
       "889        1    Mr  \n",
       "890        1    Mr  \n",
       "\n",
       "[891 rows x 16 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f005c13e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:44.166505Z",
     "iopub.status.busy": "2024-09-29T10:25:44.165505Z",
     "iopub.status.idle": "2024-09-29T10:25:44.176836Z",
     "shell.execute_reply": "2024-09-29T10:25:44.175688Z"
    },
    "papermill": {
     "duration": 0.031023,
     "end_time": "2024-09-29T10:25:44.179293",
     "exception": false,
     "start_time": "2024-09-29T10:25:44.148270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 1, 3, 3, 3, 2, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 3, 1, 3, 3,\n",
       "       2, 3, 3, 3, 1, 3, 2, 3, 1, 1, 2, 3, 1, 3, 1, 3, 3, 1, 3, 3, 1, 1,\n",
       "       2, 3, 2, 2, 1, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 3, 1, 3, 3, 3, 1, 1,\n",
       "       3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2,\n",
       "       3, 1, 3, 3, 1, 3, 2, 3, 1, 3, 3, 3, 1, 3, 3, 1, 2, 3, 1, 3, 1, 3,\n",
       "       3, 3, 3, 1, 3, 3, 3, 1, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
       "       3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 3, 1, 3,\n",
       "       3, 1, 3, 3, 3, 1, 3, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 3, 1, 1, 2, 3,\n",
       "       2, 3, 3, 3, 3, 1, 3, 3, 3, 1, 2, 1, 3, 3, 3, 3, 2, 1, 3, 3, 1, 3,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2,\n",
       "       3, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 3, 2, 3, 3, 3,\n",
       "       2, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 3, 3, 3, 2, 3, 2, 3, 3, 3, 3, 1,\n",
       "       3, 3, 3, 2, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 2, 2, 3, 2, 3, 3, 1, 1,\n",
       "       1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 2, 3, 3, 1, 3, 3, 3, 1,\n",
       "       2, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
       "       1, 3, 1, 3, 3, 3, 2, 2, 3, 1, 1, 3, 2, 3, 1, 1, 2, 1, 1, 3, 3, 1,\n",
       "       3, 1, 3, 1, 1, 3, 1, 1, 3, 3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 1, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3,\n",
       "       3, 3, 1, 2, 3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 1, 1, 3, 1, 3, 3, 3, 2, 3, 3,\n",
       "       3, 3, 3, 3, 3, 3, 2, 1, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
       "       1, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1,\n",
       "       3, 3, 3, 3, 2, 3, 3, 1, 3, 3, 3, 2, 3, 3, 3, 3, 1, 1, 1, 2, 3, 3,\n",
       "       3, 3, 3, 1, 1, 1, 3, 3, 3, 1, 3, 1, 3, 3, 3, 3, 1, 3, 3, 1, 3, 3,\n",
       "       1, 3, 2, 1, 3, 3, 1, 1, 3, 3, 2, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3,\n",
       "       3, 2, 3, 3, 3, 3, 1, 3, 3, 1, 3, 1, 1, 3, 3, 1, 3, 3, 3, 1, 3, 2,\n",
       "       3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 1, 3, 3, 3, 2, 2, 3, 3,\n",
       "       3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 2, 3, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3,\n",
       "       3, 3, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 1,\n",
       "       3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 2, 1,\n",
       "       3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 3, 3, 3, 2, 1, 3, 1, 3, 1, 2,\n",
       "       3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 3, 3, 1, 3, 2, 3, 3, 3, 3, 3, 3, 3,\n",
       "       3, 2, 3, 3, 3, 1, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3,\n",
       "       3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 1, 2, 2, 3,\n",
       "       3, 3, 3, 1, 3, 3, 2, 3, 2, 3, 1, 3, 3, 3, 3, 3, 3, 2, 3, 1, 2, 3,\n",
       "       3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
       "       3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 2, 3, 1, 2, 3, 1, 3, 1, 3, 3, 1,\n",
       "       3, 3, 3, 1, 3, 3, 1, 1, 3, 3, 3, 1, 3, 1, 3, 3, 1, 3, 3, 3, 3, 3,\n",
       "       1, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1,\n",
       "       3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 2])"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Embarked'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "46084e4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:44.214054Z",
     "iopub.status.busy": "2024-09-29T10:25:44.213565Z",
     "iopub.status.idle": "2024-09-29T10:25:44.225787Z",
     "shell.execute_reply": "2024-09-29T10:25:44.224528Z"
    },
    "papermill": {
     "duration": 0.032749,
     "end_time": "2024-09-29T10:25:44.228457",
     "exception": false,
     "start_time": "2024-09-29T10:25:44.195708",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Define the features (X) and target (y)\n",
    "X = df.drop(['Survived','Name','Ticket','Title','Cabin'], axis=1)  # Drop the target column from features\n",
    "y = df['Survived']  # Target variable\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "86a24db9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:44.264082Z",
     "iopub.status.busy": "2024-09-29T10:25:44.263060Z",
     "iopub.status.idle": "2024-09-29T10:25:44.277340Z",
     "shell.execute_reply": "2024-09-29T10:25:44.276176Z"
    },
    "papermill": {
     "duration": 0.035146,
     "end_time": "2024-09-29T10:25:44.280573",
     "exception": false,
     "start_time": "2024-09-29T10:25:44.245427",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 16 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    int64  \n",
      " 5   Age          891 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     891 non-null    int64  \n",
      " 12  Has_Cabin    891 non-null    int64  \n",
      " 13  FamilySize   891 non-null    int64  \n",
      " 14  IsAlone      891 non-null    int64  \n",
      " 15  Title        891 non-null    object \n",
      "dtypes: float64(2), int64(10), object(4)\n",
      "memory usage: 111.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3f2a972d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:44.316468Z",
     "iopub.status.busy": "2024-09-29T10:25:44.315992Z",
     "iopub.status.idle": "2024-09-29T10:25:46.338976Z",
     "shell.execute_reply": "2024-09-29T10:25:46.337667Z"
    },
    "papermill": {
     "duration": 2.043352,
     "end_time": "2024-09-29T10:25:46.341608",
     "exception": false,
     "start_time": "2024-09-29T10:25:44.298256",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(n_estimators=700, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(n_estimators=700, random_state=42)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(n_estimators=700, random_state=42)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Initialize the Random Forest Classifier\n",
    "model = RandomForestClassifier(n_estimators=700, random_state=42)\n",
    "\n",
    "# Train the model on the training data\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "b5f271d3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:46.377249Z",
     "iopub.status.busy": "2024-09-29T10:25:46.376780Z",
     "iopub.status.idle": "2024-09-29T10:25:46.453136Z",
     "shell.execute_reply": "2024-09-29T10:25:46.452076Z"
    },
    "papermill": {
     "duration": 0.097177,
     "end_time": "2024-09-29T10:25:46.455905",
     "exception": false,
     "start_time": "2024-09-29T10:25:46.358728",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Make predictions on the test set\n",
    "y_pred = model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "a602c407",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:46.491253Z",
     "iopub.status.busy": "2024-09-29T10:25:46.490789Z",
     "iopub.status.idle": "2024-09-29T10:25:46.509731Z",
     "shell.execute_reply": "2024-09-29T10:25:46.508516Z"
    },
    "papermill": {
     "duration": 0.039533,
     "end_time": "2024-09-29T10:25:46.512250",
     "exception": false,
     "start_time": "2024-09-29T10:25:46.472717",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 83.24%\n",
      "Confusion Matrix:\n",
      "[[94 11]\n",
      " [19 55]]\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.90      0.86       105\n",
      "           1       0.83      0.74      0.79        74\n",
      "\n",
      "    accuracy                           0.83       179\n",
      "   macro avg       0.83      0.82      0.82       179\n",
      "weighted avg       0.83      0.83      0.83       179\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Evaluate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy * 100:.2f}%')\n",
    "\n",
    "# Confusion matrix\n",
    "print(\"Confusion Matrix:\")\n",
    "print(confusion_matrix(y_test, y_pred))\n",
    "\n",
    "# Classification report\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "285d88c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:46.548941Z",
     "iopub.status.busy": "2024-09-29T10:25:46.548048Z",
     "iopub.status.idle": "2024-09-29T10:25:46.624666Z",
     "shell.execute_reply": "2024-09-29T10:25:46.623516Z"
    },
    "papermill": {
     "duration": 0.098017,
     "end_time": "2024-09-29T10:25:46.627554",
     "exception": false,
     "start_time": "2024-09-29T10:25:46.529537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "y_prob = model.predict_proba(X_test)[:, 1]  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7bc3e272",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:46.663811Z",
     "iopub.status.busy": "2024-09-29T10:25:46.662757Z",
     "iopub.status.idle": "2024-09-29T10:25:46.673759Z",
     "shell.execute_reply": "2024-09-29T10:25:46.672524Z"
    },
    "papermill": {
     "duration": 0.031445,
     "end_time": "2024-09-29T10:25:46.676190",
     "exception": false,
     "start_time": "2024-09-29T10:25:46.644745",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC Score: 0.89\n"
     ]
    }
   ],
   "source": [
    "roc_auc = roc_auc_score(y_test, y_prob)\n",
    "print(f'ROC AUC Score: {roc_auc:.2f}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "ef173d84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-29T10:25:46.712321Z",
     "iopub.status.busy": "2024-09-29T10:25:46.711513Z",
     "iopub.status.idle": "2024-09-29T10:25:47.038716Z",
     "shell.execute_reply": "2024-09-29T10:25:47.037493Z"
    },
    "papermill": {
     "duration": 0.348254,
     "end_time": "2024-09-29T10:25:47.041440",
     "exception": false,
     "start_time": "2024-09-29T10:25:46.693186",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
    "\n",
    "# Plot ROC curve\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.2f})')\n",
    "plt.plot([0, 1], [0, 1], color='red', linestyle='--')  # Dashed diagonal line for random guessing\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5754741,
     "sourceId": 9464633,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.90641,
   "end_time": "2024-09-29T10:25:47.783060",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-29T10:25:35.876650",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
